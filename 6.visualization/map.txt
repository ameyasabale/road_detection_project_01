import folium
import pandas as pd
import os
import base64

# === INPUT PATHS ===
csv_path = r"C:\\Users\\M.P\\Downloads\\sample\\final_output1.csv"
output_map_path = r"C:\\Users\\M.P\\Downloads\\mappp\\satellite_map4444.html"
label_image_folder = r"C:\\Users\\M.P\\Downloads\\output04"
unlabeled_image_folder = r"C:\\Users\\M.P\\Downloads\\frames_all1\\extracted_frames"

os.makedirs(os.path.dirname(output_map_path), exist_ok=True)

# === Load CSV ===
df = pd.read_csv(csv_path)

# === Create base map ===
start_lat = float(df.iloc[0]["Latitude"])
start_lon = float(df.iloc[0]["Longitude"])
m = folium.Map(location=[start_lat, start_lon], zoom_start=16, tiles=None)

# === Satellite + Labels ===
folium.TileLayer(
    tiles="https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}",
    attr='Esri Satellite', name='Satellite', overlay=False, control=True
).add_to(m)

folium.TileLayer(
    tiles="https://server.arcgisonline.com/ArcGIS/rest/services/Reference/World_Boundaries_and_Places/MapServer/tile/{z}/{y}/{x}",
    attr="Esri Labels", name="Labels", overlay=True, control=True
).add_to(m)

# === Color Map ===
color_map = {
    "pothole": "red",
    "damage surface": "orange",
    "cracks": "blue",
    "sign board": "green",
    "speed breaker": "purple",
    "none": "gray"
}

# === Add segments with popup and tooltip ===
for _, row in df.iterrows():
    lat = row.get("Latitude")
    lon = row.get("Longitude")
    frame = str(row.get("Frame", ""))
    location = row.get("Location", "")
    defects = str(row.get("Defect Categories", ""))
    total = row.get("Total Defects", 0)

    if pd.isna(lat) or pd.isna(lon):
        continue

    # Get defect counts
    categories = ["pothole", "damage surface", "cracks", "sign board", "speed breaker"]
    defect_counts = {cat: defects.lower().count(cat) for cat in categories}

    if sum(defect_counts.values()) == 0:
        continue  # skip frames with no known defects

    # === Dominant defect (for color) ===
    dominant_defect = max(defect_counts, key=defect_counts.get)
    color = color_map.get(dominant_defect, "gray")

    # === Tooltip text ===
    tooltip_lines = [f"{cat.upper()}: {defect_counts[cat]}" for cat in categories if defect_counts[cat] > 0]
    tooltip_text = f"{dominant_defect.upper()} is dominant\n" + "\n".join(tooltip_lines)

    # === Labeled image popup ===
    label_img_html = "<i>No label image</i>"
    matched_file = next((os.path.join(label_image_folder, f) for f in os.listdir(label_image_folder) if f.lower() == frame.lower()), None)
    if matched_file and os.path.exists(matched_file):
        with open(matched_file, 'rb') as f:
            encoded_img = base64.b64encode(f.read()).decode('utf-8')
        label_img_html = f'<img src="data:image/jpeg;base64,{encoded_img}" width="250px">'

    # === Segment line ===
    offset = 0.00005
    start_point = [lat, lon - offset]
    end_point = [lat, lon + offset]

    popup_html = f"""
    <div style="font-size:13px; padding:5px; max-width:300px;">
        <b>Frame:</b> {frame}<br>
        <b>Location:</b> {location}<br>
        <b>Defects:</b> {defects}<br>
        <b>Total:</b> {total}<br><br>
        <b>Labeled Image:</b><br>
        {label_img_html}
    </div>
    """

    folium.PolyLine(
        locations=[start_point, end_point],
        color=color,
        weight=8,
        tooltip=folium.Tooltip(tooltip_text),
        popup=folium.Popup(popup_html, max_width=350)
    ).add_to(m)

# === Add Legend Box ===
legend_html = """
<div style='position: fixed; 
            bottom: 50px; left: 50px; width: 200px; z-index: 9999; 
            background-color: white; border: 2px solid gray; border-radius: 8px; 
            padding: 10px; font-size: 14px; box-shadow: 2px 2px 5px rgba(0,0,0,0.4);'>

<b>üõ†Ô∏è Defect Legend</b><br><br>
<i style="color:red;">‚ñ†</i> Pothole<br>
<i style="color:orange;">‚ñ†</i> Damage Surface<br>
<i style="color:blue;">‚ñ†</i> Cracks<br>
<i style="color:green;">‚ñ†</i> Sign Board<br>
<i style="color:purple;">‚ñ†</i> Speed Breaker<br>

</div>
"""
m.get_root().html.add_child(folium.Element(legend_html))

# === Finalize Map ===
folium.LayerControl().add_to(m)
m.save(output_map_path)
print(f"‚úÖ Map with dominant defect coloring and full tooltips saved at:\n{output_map_path}")
